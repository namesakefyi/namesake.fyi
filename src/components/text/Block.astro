---
import type { Block, BlockProps } from "astro-portabletext/types";
import { usePortableText } from "astro-portabletext";
import Heading from "./Heading.astro";

export type Props = BlockProps;

const props = Astro.props;

const { node } = props;

// biome-ignore lint/correctness/useHookAtTopLevel: Biome is wrong
const { getDefaultComponent } = usePortableText(node);

const isHeading = node.style && /^h[1-6]$/.test(node.style);

const level = isHeading
  ? (Number.parseInt(node.style.charAt(1), 10) as 1 | 2 | 3 | 4)
  : 1;

const getChildrenText = (node: Block) =>
  node.children
    .map((node) => (typeof node === "string" ? node : node.text || ""))
    .join("");

function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, "") // Remove special characters
    .replace(/\s+/g, "-") // Replace spaces with hyphens
    .replace(/-+/g, "-") // Replace multiple hyphens with single
    .trim();
}

const slug = generateSlug(getChildrenText(node));

const DefaultBlock = getDefaultComponent();
---

{
  isHeading ? (
    <Heading level={level} slug={slug}>
      <slot />
    </Heading>
  ) : (
    <DefaultBlock {...props}>
      <slot />
    </DefaultBlock>
  )
}
