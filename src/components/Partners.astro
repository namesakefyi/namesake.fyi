---
import type { SanityDocument } from "@sanity/client";
import { loadQuery } from "~/sanity/lib/loadQuery";
import SanityImage from "./SanityImage.astro";

const { data: partners } = await loadQuery<SanityDocument[]>({
  query: `*[_type == "partner"]`,
});

const shuffledPartners = partners.sort(() => 0.5 - Math.random());
---

<div class="partners">
  <h2 class="visually-hidden">Partners</h2>
  <ul>
    {
      shuffledPartners.map((partner) => (
        <li>
          <a
            href={partner.url}
            target="_blank"
            rel="noopener noreferrer"
            aria-label={`Visit ${partner.name}`}
          >
            <SanityImage
              asset={partner.logo.asset}
              alt={partner.name}
              options={{ width: 200 }}
            />
          </a>
        </li>
      ))
    }
  </ul>
</div>

<style lang="scss">
  .partners {
    display: flex;
    align-items: center;
    flex-direction: column;
    margin-inline: auto;
    width: 100%;
    max-width: 100vw;
    gap: var(--space-3xl);
    padding-block: var(--space-xl);
    margin-block-start: var(--space-3xl);

    ul {
      --row-height: 80px;
      list-style-type: none;
      margin: 0;
      padding: 0;
      max-width: 100%;
      display: grid;
      justify-items: center;
      align-items: center;
      grid-template-columns: repeat(2, minmax(240px, 1fr));
      grid-auto-rows: var(--row-height);
      gap: var(--space-l) var(--space-xl);
      user-select: none;

      @media (width < 900px) {
        grid-template-columns: repeat(2, minmax(240px, 1fr));
      }

      @media (width < 600px) {
        grid-template-columns: repeat(2, 1fr);
      }

      li {
        min-height: 0;
        line-height: 0;
      }

      a {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 5px;
      }

      picture,
      img {
        display: block;
        width: 200px;

        @supports (object-fit: contain) {
          height: var(--row-height);
          object-fit: contain;
        }
      }

      @media (forced-colors: active) {
        filter: invert(1);
      }
    }
  }
</style>
