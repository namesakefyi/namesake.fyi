---
import { Image } from "astro:assets";
import { RiArrowRightLine } from "@remixicon/react";
import type { SanityDocument } from "@sanity/client";
import Partners from "~/components/Partners.astro";
import PortableText from "~/components/PortableText.astro";
import heroIllustration from "~/content/pages/_images/hero-form.png";
import siteInfo from "~/data/site-info";
import BaseLayout from "~/layouts/BaseLayout.astro";
import { loadQuery } from "~/sanity/lib/loadQuery";

// Fetch the home page from Sanity (slug: "index" or empty slug for home)
const { data: page } = await loadQuery<SanityDocument>({
  query: `*[_type == "page" && (slug.current == "index" || slug.current == "" || !defined(slug))][0]{
    _id,
    title,
    slug,
    description,
    content,
    ogImage,
    annotation,
    color
  }`,
});

if (!page) return Astro.redirect("/404");
---

<BaseLayout
  title={page.title || siteInfo.name}
  description={page.description || siteInfo.description}
  ogImage={page.ogImage?.asset}
  ogAlt={page.ogImage?.alt}
>
  <div class="home">
    <h1>
      <span>Your name is</span>
      <span class="hero-highlight">yours to change</span>
    </h1>
    <div class="hero">
      <Image
        src={heroIllustration}
        alt="Some snails and flowers on top of a court order document"
        class="illustration"
        widths={[800, 1200, 1800]}
        sizes={`(max-width: 400px) 800px, (max-width: 600px) 1200px, 1800px`}
      />
    </div>
    <div class="content">
      <PortableText value={page.content} />
      <div class="buttons">
        <a href={siteInfo.urls.app} class="button primary"
          >Get started <RiArrowRightLine className="icon" /></a
        >
        <a href={siteInfo.urls.chat}>Join us on Discord</a>
      </div>
      <Partners />
    </div>
  </div>
</BaseLayout>

<script>
  import { annotate } from "rough-notation";

  const heroHighlight: HTMLElement | null =
    document.querySelector(".hero-highlight");

  const isForcedColors = window.matchMedia("(forced-colors: active)").matches;
  if (heroHighlight && !isForcedColors) {
    heroHighlight.style.color = "var(--bg)";
    const highlight = annotate(heroHighlight, {
      type: "highlight",
      iterations: 1,
    });
    highlight.show();
  }
</script>

<style lang="scss">
  .home {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  @keyframes slideInUp {
    from {
      transform: translateY(var(--space-m));
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .hero {
    padding-inline: var(--space-2xs);
    padding-block-start: var(--space-3xl);
    margin-inline: calc(-1 * var(--space-m));
    position: relative;
    overflow: hidden;
    max-width: 100vw;
  }

  .illustration {
    width: 900px;
    max-width: 100%;
    user-select: none;
    pointer-events: none;
    mix-blend-mode: multiply;
    animation: slideInUp 0.6s ease-out 0.3s both;

    @media (forced-colors: active) {
      filter: invert(1);
      mix-blend-mode: screen;
    }
  }

  h1 {
    text-align: center;
    font-size: var(--step-5);

    @media (width >= 420px) {
      font-size: var(--step-6);
    }

    @media (width >= 600px) {
      font-size: var(--step-7);
    }

    span {
      white-space: nowrap;
    }
  }

  .hero-highlight {
    color: var(--bg);
  }

  .content {
    padding-block-start: var(--space-xl);
    max-width: 860px;
    font-size: var(--step-1);
    animation: slideInUp 0.6s ease-out 0.6s both;
    text-wrap: pretty;

    :global(p) + :global(p) {
      margin-top: var(--space-l);
    }

    @media (width < 540px) {
      font-size: var(--step-0);
    }
  }

  .buttons {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-l);
    margin-block-start: var(--space-3xl);
  }

  .icon {
    margin-inline-end: calc(var(--space-2xs) * -1);
  }
</style>
